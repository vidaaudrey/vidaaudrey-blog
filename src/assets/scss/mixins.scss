@mixin box-shadow($shadow: 0 1px 3px rgba(0,0,0,.25)) {
  -webkit-box-shadow: $shadow;
     -moz-box-shadow: $shadow;
          box-shadow: $shadow;
}

@mixin cover-background() {
  -webkit-background-size: cover;
   -moz-background-size: cover;
   -o-background-size: cover;
   background-size: cover;
}

// Utility 
@mixin clearfix {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

// .tab-focus() {
//   // Default
//   outline: thin dotted #333;
//   // Webkit
//   outline: 5px auto -webkit-focus-ring-color;
//   outline-offset: -2px;
// }

// .center-block() {
//   display: block;
//   margin-left: auto;
//   margin-right: auto;
// }

// .ie7-inline-block() {
//   *display: inline; /* IE7 inline-block hack */
//   *zoom: 1;
// }

// .ie7-restore-left-whitespace() {
//   *margin-left: .3em;

//   &:first-child {
//     *margin-left: 0;
//   }
// }

// .ie7-restore-right-whitespace() {
//   *margin-right: .3em;

//   &:last-child {
//     *margin-left: 0;
//   }
// }

// .size(@height: 5px, @width: 5px) {
//   width: @width;
//   height: @height;
// }
// .square(@size: 5px) {
//   .size(@size, @size);
// }

// .placeholder(@color: @placeholderText) {
//   :-moz-placeholder {
//     color: @color;
//   }
//   ::-webkit-input-placeholder {
//     color: @color;
//   }
// }

// .text-overflow() {
//   overflow: hidden;
//   text-overflow: ellipsis;
//   white-space: nowrap;
// }
// .border-radius(@radius: 5px) {
//   -webkit-border-radius: @radius;
//      -moz-border-radius: @radius;
//           border-radius: @radius;
// }

// .box-shadow(@shadow: 0 1px 3px rgba(0,0,0,.25)) {
//   -webkit-box-shadow: @shadow;
//      -moz-box-shadow: @shadow;
//           box-shadow: @shadow;
// }

// .transition(@transition) {
//   -webkit-transition: @transition;
//      -moz-transition: @transition;
//       -ms-transition: @transition;
//        -o-transition: @transition;
//           transition: @transition;
// }

// .rotate(@degrees) {
//   -webkit-transform: rotate(@degrees);
//      -moz-transform: rotate(@degrees);
//       -ms-transform: rotate(@degrees);
//        -o-transform: rotate(@degrees);
//           transform: rotate(@degrees);
// }
// .scale(@ratio) {
//   -webkit-transform: scale(@ratio);
//      -moz-transform: scale(@ratio);
//       -ms-transform: scale(@ratio);
//        -o-transform: scale(@ratio);
//           transform: scale(@ratio);
// }
// .translate(@x: 0, @y: 0) {
//   -webkit-transform: translate(@x, @y);
//      -moz-transform: translate(@x, @y);
//       -ms-transform: translate(@x, @y);
//        -o-transform: translate(@x, @y);
//           transform: translate(@x, @y);
// }
// .skew(@x: 0, @y: 0) {
//   -webkit-transform: skew(@x, @y);
//      -moz-transform: skew(@x, @y);
//       -ms-transform: skew(@x, @y);
//        -o-transform: skew(@x, @y);
//           transform: skew(@x, @y);
// }
// .translate3d(@x: 0, @y: 0, @z: 0) {
//   -webkit-transform: translate(@x, @y, @z);
//      -moz-transform: translate(@x, @y, @z);
//       -ms-transform: translate(@x, @y, @z);
//        -o-transform: translate(@x, @y, @z);
//           transform: translate(@x, @y, @z);
// }

// .background-clip(@clip) {
//   -webkit-background-clip: @clip;
//      -moz-background-clip: @clip;
//           background-clip: @clip;
// }

// .background-size(@size){
//   -webkit-background-size: @size;
//      -moz-background-size: @size;
//        -o-background-size: @size;
//           background-size: @size;
// }


// .box-sizing(@boxmodel) {
//   -webkit-box-sizing: @boxmodel;
//      -moz-box-sizing: @boxmodel;
//           box-sizing: @boxmodel;
// }

// .user-select(@select) {
//   -webkit-user-select: @select;
//      -moz-user-select: @select;
//        -o-user-select: @select;
//           user-select: @select;
// }

// .resizable(@direction: both) {
//   resize: @direction; // Options: horizontal, vertical, both
//   overflow: auto; // Safari fix
// }

// .content-columns(@columnCount, @columnGap: @gridColumnGutter) {
//   -webkit-column-count: @columnCount;
//      -moz-column-count: @columnCount;
//           column-count: @columnCount;
//   -webkit-column-gap: @columnGap;
//      -moz-column-gap: @columnGap;
//           column-gap: @columnGap;
// }

// .opacity(@opacity: 100) {
//   opacity: @opacity / 100;
//    filter: e(%("alpha(opacity=%d)", @opacity));
// }


@mixin border-radius($radius: 5px) {
    -webkit-background-clip: padding-box;
    -webkit-border-radius: $radius;
    -moz-background-clip: padding-box;
    -moz-border-radius: $radius;
    border-radius: $radius;
    background-clip: padding-box;
}

@mixin inset-box-shadow($horizontal: 0px, $vertical: 1px, $blur: 2px, $color: #CCC) {
  -webkit-box-shadow: inset $horizontal $vertical $blur $color;
  -moz-box-shadow: inset $horizontal $vertical $blur $color;
  box-shadow: inset $horizontal $vertical $blur $color;
}
@mixin multi-color-border($top, $sides, $bottom) {
    border-top: 1px solid $top;
    border-left: 1px solid $sides;
    border-right: 1px solid $sides;
    border-bottom: 1px solid $bottom;
}
@mixin multi-border-radius($topLeft: 5px, $topRight: 5px, $bottomRight: 5px, $bottomLeft: 5px) {
    -webkit-border-top-left-radius: $topLeft;
    -webkit-border-top-right-radius: $topRight;
    -webkit-border-bottom-right-radius: $bottomRight;
    -webkit-border-bottom-left-radius: $bottomLeft;
    -moz-border-radius-topleft: $topLeft;
    -moz-border-radius-topright: $topRight;
    -moz-border-radius-bottomright: $bottomRight;
    -moz-border-radius-bottomleft: $bottomLeft;
    border-top-left-radius: $topLeft;
    border-top-right-radius: $topRight;
    border-bottom-right-radius: $bottomRight;
    border-bottom-left-radius: $bottomLeft;
}
@mixin vertical-gradient($start: #000, $stop: #FFF) { background: ($start + $stop) / 2;
    background: -webkit-gradient(linear, left top, left bottom, from($start), to($stop));
    background: -moz-linear-gradient(center top, $start 0%, $stop 100%);
    background: -moz-gradient(center top, $start 0%, $stop 100%);
}
@mixin vertical-gradient-with-image($image, $start: #000, $stop: #FFF) {
    background: ($start + $stop) / 2 $image;
    background: $image, -webkit-gradient(linear, left top, left bottom, from($start), to($stop));
    background: $image, -moz-linear-gradient(center top, $start 0%, $stop 100%);
    background: $image, -moz-gradient(center top, $start 0%, $stop 100%);
}
@mixin opacity($op) {
    -khtml-opacity: $op;
    -moz-opacity: $op;
    opacity: $op;
}




// ----
// Sass (v3.4.7)
// Compass (v1.0.1)
// ----

/// Convert angle
/// @author Chris Eppstein
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
  $convertable-units: deg grad turn rad;
  $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
    @return $value
             / nth($conversion-factors, index($convertable-units, unit($value)))
             * nth($conversion-factors, index($convertable-units, $unit));
  }
  
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));
  
  @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
  }
  
  $conversion-map: ( 
    to top          : bottom,
    to top right    : bottom left,
    to right top    : left bottom,
    to right        : left,
    to bottom right : top left,
    to right bottom : left top,
    to bottom       : top,
    to bottom left  : top right,
    to left bottom  : right top,
    to left         : right,
    to left top     : right bottom,
    to top left     : bottom right
  );
    
  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }
  
  @return 90deg - convert-angle($value, 'deg');
}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  @if is-direction($direction) == false {
    $color-stops: ($direction, $color-stops);
    $direction: 180deg;
  }
  
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}